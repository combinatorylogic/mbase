//////////////////////////////////////////////////////////////////////////////
//
//   OpenMBase
//
// Copyright 2005-2015, Meta Alternative Ltd. All rights reserved.
//
//
//////////////////////////////////////////////////////////////////////////////




etest(2*2,4);

etest({a=2; return a*a+a},6);

etest(.net: {double a = 2.0; (int)(a*a);}, 4);

etest({a = [1;2;3]; map a do a*a+1}, [2;5;10]);

etest({x = "x"; notnet(string x) { leave concat(x,concat(x,x)); }}, "xxx");

etest({s = "2*2+3*x"; parse s as pfront}, #'(expr (stopfix (stopfix (leftass (binop + (leftass (binop * (number 2) (stopfix (number 2)))) (stopfix (leftass (binop * (number 3) (stopfix (var x)))))))))));

parser helloworld  ( ) {
  !!spaces;

  @@spaces := ([space] / [cr]) +;
  @@space := " "/[tab];
  @@cr := 13;
  @@tab := 9;

  name := ([A-Z]/[a-z]) ([a-z]+);

  @tkname := [name];

  helloworld := Hello "," [tkname]:nm "!" => nm;
}

etest(parse "Hello, World!" as helloworld, #'(tkname . "World"));

syntax in top, start: ' regexp [qident]:nm "=" [miniexpr]:e ";"? '
{
  return 'expr'('lisp'('my_peg_regexp'(nm,e)))
}

macro my_peg_regexp(nm, e)
{
  symbols(nn,nn1,nn2) {
   #`(top-begin
       (packrat-ast ,nm ( )
          (terminal () normal ,nn ,e (() ()))
          (terminal () normal ,nn1 (star (seq (notp (terminal ,nn)) (trivial (anychar)))) (()()))
          (terminal () token  ,nn2 (terminal ,nn) (() ()))
          (terminal () term   ,nm (star (seq (terminal ,nn1)
                                          (bind ret (terminal ,nn2))))
                                          (() (var ret)))
                                          )
       (function ,nm (str) (reverse
          (map cdr (pfront:easyparse ,nm str)))))
  }
}

----------

regexp nuum = [0-6]+;


etest(nuum("abc111 ggg654 iii98543"),["111";"654";"543"]);


public class NNTest1 {
  public static int Add(int a, int b) {
    return a+b;
  }

  public static string[] test2(int a, int b)
  {
     ar = new string[2];
     ar[0] = concat(".",a.ToString());
     ar[1] = concat("+",b.ToString());
     return ar;
  }

  public static string test3(string[] s)
  {
     string x = ":";
     foreach(n in s) {
        x = concat(x,n);
     }
     return x;
  }
}


etest(.net: NNTest1.Add(22,22), 44);

etest(.net: NNTest1.test3(NNTest1.test2(10,20)), ":.10+20");


etest(#(let ((a =pf: 1+1)) =pf: a*a),4);

etest(collector(add,get) {iter i in [6..10] do add(i); get()},[6;7;8;9]);

etest(.net: (2*2).ToString(), "4");



etest(#'(a (b c) (d ((b x) e))) /.. { b(v) -> v }, #'(a c (d (x e))));


etest(map i in ['a';'b';'x';'d';'c'] do
        case i {
          'a'|'b' -> 1
        | 'c'|'d'|'e' -> 2
        | else -> 3
        }, [1;1;3;2;2]);

etest(map i in [[];1;[1;2];'a';"a"] do
       cond
       |  %null?(i) -> 1
       |  %number?(i) -> 2
       |  %symbol?(i) -> 3
       |  %string?(i) -> 4
       |  else -> 5
      , [1;2;5;3;4]);

etest({<[a;b;c]> = [1;2;3];
       'test'(c,b,a)}, ['test';3;2;1]);


etest({try { abc = 0; cde = 1/abc; return cde} catch (t_Exception e) { return 10;}},10);

etest(match [1;2;3] with [a;@b] -> [b;a], [[2;3];1]);



parser recpars ( pfront ) {
   !!Spaces;
   recpars := [rrexpr]:e => e;
   rrexpr := { [rrexpr]:a "+" [rrexpr]:b => plus ... }
           / { [rrexpr]:a "-" [rrexpr]:b => minus ... }
           / { [rrexpr]:a "!" => fact ... }
           / { [ident]:i => var(i) }
           ;
}

etest(parse "a+b-c" as recpars, #'(minus (plus (var a) (var b)) (var c)));

etest(.net: {
  lift: static int counter;
  lift: static int inc() { this.counter = this.counter + 1; return this.counter; };
  leave {this.inc();this.inc();};
}, 2);

mixed class Test.MixTest {
  mbase static object test(int n) {
     [fromto(1,n)]
  }
  public static object dntest()
  {
     return this.test(4);
  }
}


etest(.net: Test.MixTest.dntest(), #'((1 2 3)));

etest(roman MMXI, 2011);

etest(roman MCMXCIX, 1999);

etest('a'==='a', true);

etest(4>3, true);

etest("a" $== "a", true);

//// Euler tests


// Euler 1
etest(foldl( #+ , 0, [ x | x <- [0..1000] where ((x mod 3 == 0) || (x mod 5 == 0))]), 233168);

// Euler 2
etest(foldl( #+ , 0, [ x |
        x <- do fib(a = 1, b = 1) { n = a + b; if(n>4000000) [] else n : fib(b, n)}
        where x mod 2 == 0 ]), 4613732)

// modules

-------------

module abcmod
   export abcfun;

  function abcfun(a, b) a+b

endmodule.

module abctest
   import abcmod
   export abctest

  function abctest(a, b)
     return abcfun(a, b)

endmodule.

using module abctest.
 etest(abctest(2,2), 4);
endusing.




///