(corelib:def 'bootlib:cddr (lambda (1) (corelib:cdr (corelib:cdr (arg-ref 0)))))
(corelib:def 'bootlib:caddr (lambda (1) (corelib:car (bootlib:cddr (arg-ref 0)))))
(corelib:def 'bootlib:cadddr (lambda (1) (corelib:car (corelib:cdr (bootlib:cddr (arg-ref 0))))))
(corelib:def 'bootlib:cadr (lambda (1) (corelib:car (corelib:cdr (arg-ref 0)))))
(corelib:def 'bootlib:cdar (lambda (1) (corelib:cdr (corelib:car (arg-ref 0)))))
(corelib:def 'bootlib:cdddr (lambda (1) (corelib:cdr (bootlib:cddr (arg-ref 0)))))
(corelib:def 'bootlib:caar (lambda (1) (corelib:car (corelib:car (arg-ref 0)))))
(corelib:def 'bootlib:cadar (lambda (1) (corelib:car (corelib:cdr (corelib:car (arg-ref 0))))))
(corelib:def 'bootlib::Y (lambda (1) ((lambda (1 (0 arg)) ((env-ref 0) (lambda (1 (0 arg)) (((env-ref 0) (env-ref 0)) (arg-ref 0))))) (lambda (1 (0 arg)) ((env-ref 0) (lambda (1 (0 arg)) (((env-ref 0) (env-ref 0)) (arg-ref 0))))))))
(corelib:def 'bootlib::Y2 (lambda (1) ((lambda (1 (0 arg)) ((env-ref 0) (lambda (2 (0 arg)) (((env-ref 0) (env-ref 0)) (arg-ref 0) (arg-ref 1))))) (lambda (1 (0 arg)) ((env-ref 0) (lambda (2 (0 arg)) (((env-ref 0) (env-ref 0)) (arg-ref 0) (arg-ref 1))))))))
(corelib:def 'bootlib::Y0 (lambda (1) ((lambda (1 (0 arg)) ((env-ref 0) (lambda (0 (0 arg)) (((env-ref 0) (env-ref 0)))))) (lambda (1 (0 arg)) ((env-ref 0) (lambda (0 (0 arg)) (((env-ref 0) (env-ref 0)))))))))
(corelib:def 'length ((lambda (1) (lambda (1 (0 arg)) ((env-ref 0) 0 (arg-ref 0)))) (bootlib::Y2 (lambda (1) (lambda (2 (0 arg)) (if (corelib:null? (arg-ref 1)) (arg-ref 0) ((env-ref 0) (corelib:+ (arg-ref 0) 1) (corelib:cdr (arg-ref 1)))))))))
(corelib:def 'bootlib::Y1 bootlib::Y)
(corelib:def 'bootlib::Y3 (lambda (1) ((lambda (1 (0 arg)) ((env-ref 0) (lambda (3 (0 arg)) (((env-ref 0) (env-ref 0)) (arg-ref 0) (arg-ref 1) (arg-ref 2))))) (lambda (1 (0 arg)) ((env-ref 0) (lambda (3 (0 arg)) (((env-ref 0) (env-ref 0)) (arg-ref 0) (arg-ref 1) (arg-ref 2))))))))
(corelib:def 'bootlib::Y4 (lambda (1) ((lambda (1 (0 arg)) ((env-ref 0) (lambda (4 (0 arg)) (((env-ref 0) (env-ref 0)) (arg-ref 0) (arg-ref 1) (arg-ref 2) (arg-ref 3))))) (lambda (1 (0 arg)) ((env-ref 0) (lambda (4 (0 arg)) (((env-ref 0) (env-ref 0)) (arg-ref 0) (arg-ref 1) (arg-ref 2) (arg-ref 3))))))))
(corelib:def 'bootlib:rec-helper (lambda (3) (corelib:cons 'core.0.reclambda (corelib:cons (arg-ref 0) (corelib:cons (arg-ref 1) (corelib:cons (corelib:cons 'begin (arg-ref 2)) nil))))))
(corelib:def 'inner.map (lambda (2 (0 self)) (if (corelib:null? (arg-ref 1)) nil (corelib:cons ((arg-ref 0) (corelib:car (arg-ref 1))) ((env-ref 0) (arg-ref 0) (corelib:cdr (arg-ref 1)))))))
(corelib:def 'map inner.map)
(corelib:def 'inner.append (lambda (2 (0 self)) (if (corelib:null? (arg-ref 0)) (arg-ref 1) (corelib:cons (corelib:car (arg-ref 0)) ((env-ref 0) (corelib:cdr (arg-ref 0)) (arg-ref 1))))))
(corelib:def 'set-cdr! corelib:set-cdr!)
(corelib:def 'set-car! corelib:set-car!)
(corelib:def 'append inner.append)
(corelib:def 'quasiquote-quote (lambda (1) (if (if (corelib:string? (arg-ref 0)) #t (if (corelib:number? (arg-ref 0)) #t)) (arg-ref 0) (corelib:cons 'quote (corelib:cons (arg-ref 0) nil)))))
(corelib:def 'unqo-check (lambda (1) ((lambda (1 (0 arg)) ((arg-ref 0) (env-ref 0))) (bootlib::Y1 (lambda (1) (lambda (1 (0 arg)) (if (corelib:null? (arg-ref 0)) nil (if (corelib:symbol? (arg-ref 0)) (if (corelib:eqv? (arg-ref 0) 'unquote) #t (if (corelib:eqv? (arg-ref 0) 'unquote-splicing) #t nil)) (if (corelib:list? (arg-ref 0)) (if ((env-ref 0) (corelib:car (arg-ref 0))) #t ((env-ref 0) (corelib:cdr (arg-ref 0)))) nil)))))))))
(corelib:def 'bootlib:fand (lambda (2) (if (arg-ref 0) (arg-ref 1) nil)))
(corelib:def 'bootlib:for (lambda (2) (if (arg-ref 0) #t (arg-ref 1))))
(corelib:def 'bootlib:not (lambda (1) (if (arg-ref 0) nil #t)))
(corelib:def 'bootlib:memq (lambda (2 (0 self)) (if (corelib:null? (arg-ref 1)) nil (if (corelib:eqv? (arg-ref 0) (corelib:car (arg-ref 1))) (arg-ref 1) ((env-ref 0) (arg-ref 0) (corelib:cdr (arg-ref 1)))))))
(corelib:def 'bootlib:lookup-env (lambda (2 (0 self)) (if (corelib:null? (arg-ref 0)) nil (if (corelib:eqv? (corelib:car (arg-ref 0)) (arg-ref 1)) (arg-ref 1) ((env-ref 0) (corelib:cdr (arg-ref 0)) (arg-ref 1))))))
(corelib:def 'bootlib:get-free (lambda (2 (0 self)) (if (corelib:null? (arg-ref 1)) (arg-ref 1) (if (corelib:symbol? (arg-ref 1)) ((lambda (1 (1 arg)) (if (corelib:null? (arg-ref 0)) (corelib:cons (env-ref 0) nil) nil)) (bootlib:lookup-env (arg-ref 0) (arg-ref 1))) (if (corelib:list? (arg-ref 1)) (if (corelib:eqv? 'lambda (corelib:car (arg-ref 1))) ((env-ref 0) (inner.append (bootlib:cadr (arg-ref 1)) (arg-ref 0)) (bootlib:cddr (arg-ref 1))) (if (corelib:eqv? 'core.0.reclambda (corelib:car (arg-ref 1))) ((env-ref 0) (inner.append (corelib:cons (bootlib:cadr (arg-ref 1)) (bootlib:caddr (arg-ref 1))) (arg-ref 0)) (bootlib:cdddr (arg-ref 1))) (if (corelib:eqv? 'quote (corelib:car (arg-ref 1))) nil (inner.append ((env-ref 0) (arg-ref 0) (corelib:car (arg-ref 1))) ((env-ref 0) (arg-ref 0) (corelib:cdr (arg-ref 1))))))) nil)))))
(corelib:def 'bootlib:unifiq (lambda (1) ((lambda (1 (0 arg)) ((lambda (2 (0 self) (0 arg)) (if (corelib:null? (arg-ref 1)) (arg-ref 0) ((lambda (1 (1 arg) (0 arg) (0 env) (1 env)) (if (corelib:shashget (env-ref 3) (arg-ref 0)) ((env-ref 2) (env-ref 1) (corelib:cdr (env-ref 0))) (begin (corelib:shashput (env-ref 3) (arg-ref 0) (arg-ref 0)) ((env-ref 2) (corelib:cons (arg-ref 0) (env-ref 1)) (corelib:cdr (env-ref 0)))))) (corelib:car (arg-ref 1))))) nil (env-ref 0))) (corelib:mkshash))))
(corelib:def '*menv* (corelib:getmacroenv))
(corelib:def 'bootlib:lookup-env-car (lambda (2 (0 self)) (if (corelib:null? (arg-ref 0)) nil (if (corelib:eqv? (bootlib:caar (arg-ref 0)) (arg-ref 1)) (bootlib:cadar (arg-ref 0)) ((env-ref 0) (corelib:cdr (arg-ref 0)) (arg-ref 1))))))
(corelib:def 'bootlib:lookup-env-car-d (lambda (2 (0 self)) (if (corelib:null? (arg-ref 0)) nil (if (corelib:eqv? (bootlib:caar (arg-ref 0)) (arg-ref 1)) (bootlib:cdar (arg-ref 0)) ((env-ref 0) (corelib:cdr (arg-ref 0)) (arg-ref 1))))))
(corelib:def 'bootlib:hashget-mod (lambda (2) ((lambda (1 (1 arg) (0 arg)) (if (arg-ref 0) (arg-ref 0) ((lambda (1 (0 env) (1 env)) (if (arg-ref 0) ((lambda (1 (0 self) (0 env) (1 env)) (if (arg-ref 0) ((lambda (1 (2 env) (0 arg) (0 env)) ((lambda (1 (1 env) (2 env)) (if (arg-ref 0) (arg-ref 0) ((env-ref 1) (corelib:cdr (env-ref 0))))) (corelib:shashget (env-ref 0) (arg-ref 0)))) (corelib:string->symbol (corelib:string-append (corelib:symbol->string (corelib:car (arg-ref 0))) (corelib:string-append ":" (corelib:symbol->string (env-ref 1)))))))) (arg-ref 0)))) (corelib:shashget (corelib:getfuncenv) '*MODULE-SEARCH-PATH*)))) (corelib:shashget (arg-ref 0) (arg-ref 1)))))
(corelib:def 'bootlib:hashget-seq (lambda (2 (0 self)) (if (corelib:null? (arg-ref 0)) nil (if (corelib:list? (arg-ref 0)) (if (corelib:null? (corelib:cdr (arg-ref 0))) (bootlib:hashget-mod (corelib:car (arg-ref 0)) (arg-ref 1)) ((lambda (1 (1 arg) (0 arg) (0 env)) (if (corelib:null? (arg-ref 0)) ((env-ref 2) (corelib:cdr (env-ref 1)) (env-ref 0)) (arg-ref 0))) (corelib:shashget (corelib:car (arg-ref 0)) (arg-ref 1)))) (bootlib:hashget-mod (arg-ref 0) (arg-ref 1))))))
(corelib:def 'bootlib:expand0 (lambda (3 (0 self)) (if (corelib:null? (arg-ref 2)) (arg-ref 2) (if (corelib:symbol? (arg-ref 2)) (if (corelib:symbol-starts-with '## (arg-ref 2)) ((lambda (1 (2 arg) (1 arg)) (if (arg-ref 0) ((bootlib:hashget-seq (env-ref 1) (env-ref 0))) 'nil)) (bootlib:hashget-seq (arg-ref 1) (arg-ref 2))) (arg-ref 2)) (if (corelib:list? (arg-ref 2)) ((lambda (1 (1 arg) (0 arg) (0 env) (2 arg)) (if (corelib:eqv? (arg-ref 0) 'quote) (env-ref 3) (if (corelib:eqv? (arg-ref 0) 'inner-expand-with) ((lambda (2 (1 env) (2 env)) ((env-ref 1) (env-ref 0) (arg-ref 0) (arg-ref 1))) (corelib:cons (bootlib:cadr (env-ref 3)) (env-ref 0)) (bootlib:caddr (env-ref 3))) (if (corelib:eqv? (arg-ref 0) 'inner-expand-first) ((env-ref 2) (env-ref 1) (env-ref 0) (inner.map (lambda (1 (0 env) (1 env) (2 env)) ((env-ref 2) (env-ref 1) (env-ref 0) (arg-ref 0))) (corelib:cdr (env-ref 3)))) ((lambda (1 (3 env) (0 env) (2 env) (1 env)) (if (arg-ref 0) (try (try ((lambda (1 (1 env) (2 env) (3 env)) (if (if (corelib:list? (arg-ref 0)) (corelib:eqv? 'top-begin (corelib:car (arg-ref 0))) nil) ((env-ref 2) nil (arg-ref 0)) ((env-ref 1) (env-ref 2) (env-ref 0) (arg-ref 0)))) ((arg-ref 0) (env-ref 0))) t_MBaseException (lambda (1 (0 env)) (begin (corelib:println "Exception") (corelib:println ((corelib:shashget (corelib:getfuncenv) 'to-string) ((corelib:shashget (corelib:getfuncenv) 'mbaseerror) (arg-ref 0)))) (corelib:println " while expanding:") (corelib:println ((corelib:shashget (corelib:getfuncenv) 'to-string) (env-ref 0))) '(Error)))) t_Exception (lambda (1 (0 env)) (begin (corelib:println "Unexpected exception while expanding: ") (corelib:println ((corelib:shashget (corelib:getfuncenv) 'to-string) (env-ref 0))) (corelib:println ((corelib:shashget (corelib:getfuncenv) 'to-string) (arg-ref 0))) '(Error)))) (inner.map (lambda (1 (1 env) (3 env) (2 env)) ((env-ref 2) (env-ref 1) (env-ref 0) (arg-ref 0))) (env-ref 0)))) (if (corelib:symbol? (arg-ref 0)) (bootlib:hashget-seq (env-ref 0) (arg-ref 0)) nil)))))) (corelib:car (arg-ref 2))) (arg-ref 2))))))
(corelib:def 'bootlib:core:lookup-global (lambda (1) ((lambda (1 (0 arg)) (if (arg-ref 0) (env-ref 0) ((lambda (1 (0 env)) (if (arg-ref 0) ((lambda (1 (0 self) (0 env)) (if (arg-ref 0) ((lambda (1 (0 arg) (0 env)) ((lambda (1 (0 env) (1 env) (0 arg)) (if (arg-ref 0) (env-ref 2) ((env-ref 1) (corelib:cdr (env-ref 0))))) (corelib:shashget (corelib:getfuncenv) (arg-ref 0)))) (corelib:string->symbol (corelib:string-append (corelib:symbol->string (corelib:car (arg-ref 0))) (corelib:string-append ":" (corelib:symbol->string (env-ref 1)))))) (env-ref 1))) (arg-ref 0)) (env-ref 0))) (corelib:shashget (corelib:getfuncenv) '*MODULE-SEARCH-PATH*)))) (corelib:shashget (corelib:getfuncenv) (arg-ref 0)))))
(corelib:def 'bootlib:postcompile (lambda (2 (0 self)) (if (corelib:null? (arg-ref 1)) (arg-ref 1) (if (corelib:symbol? (arg-ref 1)) ((lambda (1 (1 arg)) (if (corelib:null? (arg-ref 0)) (bootlib:core:lookup-global (env-ref 0)) ((lambda (1 (0 arg)) (if (corelib:eqv? (arg-ref 0) 'env) (corelib:cons 'env-ref (corelib:cons (corelib:car (env-ref 0)) nil)) (corelib:cons 'arg-ref (corelib:cons (corelib:car (env-ref 0)) nil)))) (bootlib:cadr (arg-ref 0))))) (bootlib:lookup-env-car-d (arg-ref 0) (arg-ref 1))) (if (corelib:list? (arg-ref 1)) ((lambda (1 (0 arg) (1 arg) (0 env)) (if (corelib:eqv? 'core.0.reclambda (arg-ref 0)) ((lambda (2 (0 env) (1 env) (2 env)) ((lambda (1 (1 env) (2 env) (1 arg)) (corelib:cons 'lambda (corelib:cons (corelib:cons (env-ref 2) (corelib:cons '(0 self) (bootlib:caddr (arg-ref 0)))) (corelib:cons ((env-ref 1) (corelib:cons (corelib:cons (bootlib:cadr (env-ref 0)) (corelib:cons 0 (corelib:cons 'env nil))) (inner.append ((lambda (2 (0 self)) (if (corelib:null? (arg-ref 1)) nil (corelib:cons (corelib:cons (corelib:car (arg-ref 1)) (corelib:cons (arg-ref 0) (corelib:cons 'arg nil))) ((env-ref 0) (corelib:+ (arg-ref 0) 1) (corelib:cdr (arg-ref 1)))))) 0 (bootlib:caddr (env-ref 0))) (bootlib:cadr (arg-ref 0)))) (bootlib:cadddr (env-ref 0))) nil)))) ((lambda (4 (0 self) (0 env)) (if (corelib:null? (arg-ref 0)) (corelib:cons (arg-ref 1) (corelib:cons (arg-ref 2) (corelib:cons (arg-ref 3) nil))) ((lambda (1 (3 arg) (2 arg) (1 arg) (0 arg) (0 env)) (if (corelib:null? (arg-ref 0)) ((env-ref 4) (corelib:cdr (env-ref 3)) (env-ref 2) (env-ref 1) (env-ref 0)) ((env-ref 4) (corelib:cdr (env-ref 3)) (corelib:+ (env-ref 2) 1) (corelib:cons (corelib:cons (corelib:car (env-ref 3)) (corelib:cons (env-ref 2) (corelib:cons 'env nil))) (env-ref 1)) (inner.append (env-ref 0) (corelib:cons (arg-ref 0) nil))))) (bootlib:lookup-env-car-d (env-ref 1) (corelib:car (arg-ref 0)))))) (arg-ref 0) 1 nil nil))) (bootlib:unifiq (bootlib:get-free nil (env-ref 1))) (length (bootlib:caddr (env-ref 1)))) (if (corelib:eqv? 'lambda (arg-ref 0)) ((lambda (2 (0 env) (1 env) (2 env)) ((lambda (1 (1 env) (2 env) (1 arg)) (corelib:cons 'lambda (corelib:cons (corelib:cons (env-ref 2) (bootlib:caddr (arg-ref 0))) (corelib:cons ((env-ref 1) (inner.append ((lambda (2 (0 self)) (if (corelib:null? (arg-ref 1)) nil (corelib:cons (corelib:cons (corelib:car (arg-ref 1)) (corelib:cons (arg-ref 0) (corelib:cons 'arg nil))) ((env-ref 0) (corelib:+ (arg-ref 0) 1) (corelib:cdr (arg-ref 1)))))) 0 (bootlib:cadr (env-ref 0))) (bootlib:cadr (arg-ref 0))) (bootlib:caddr (env-ref 0))) nil)))) ((lambda (4 (0 self) (0 env)) (if (corelib:null? (arg-ref 0)) (corelib:cons (arg-ref 1) (corelib:cons (arg-ref 2) (corelib:cons (arg-ref 3) nil))) ((lambda (1 (3 arg) (2 arg) (1 arg) (0 arg) (0 env)) (if (corelib:null? (arg-ref 0)) ((env-ref 4) (corelib:cdr (env-ref 3)) (env-ref 2) (env-ref 1) (env-ref 0)) ((env-ref 4) (corelib:cdr (env-ref 3)) (corelib:+ (env-ref 2) 1) (corelib:cons (corelib:cons (corelib:car (env-ref 3)) (corelib:cons (env-ref 2) (corelib:cons 'env nil))) (env-ref 1)) (inner.append (env-ref 0) (corelib:cons (arg-ref 0) nil))))) (bootlib:lookup-env-car-d (env-ref 1) (corelib:car (arg-ref 0)))))) (arg-ref 0) 0 nil nil))) (bootlib:unifiq (bootlib:get-free nil (env-ref 1))) (length (bootlib:cadr (env-ref 1)))) (if (corelib:eqv? 'quote (arg-ref 0)) (env-ref 1) (if (corelib:eqv? 'begin (arg-ref 0)) (if (corelib:null? (corelib:cdr (env-ref 1))) 'nil (if (corelib:null? (bootlib:cddr (env-ref 1))) ((env-ref 2) (env-ref 0) (bootlib:cadr (env-ref 1))) (corelib:cons 'begin (inner.map (lambda (1 (0 env) (2 env)) ((env-ref 1) (env-ref 0) (arg-ref 0))) (corelib:cdr (env-ref 1)))))) (if (corelib:eqv? 'top-bdone (arg-ref 0)) (corelib:cons 'top-begin (corelib:cdr (env-ref 1))) (if (corelib:eqv? 'top-begin (arg-ref 0)) (env-ref 1) (if (corelib:eqv? 'notaruntime (arg-ref 0)) ((env-ref 2) (env-ref 0) (corelib:cons 'begin (corelib:cdr (env-ref 1)))) (if (corelib:eqv? 'topblock (arg-ref 0)) ((env-ref 2) (env-ref 0) (corelib:cons 'begin (corelib:cdr (env-ref 1)))) (inner.map (lambda (1 (0 env) (2 env)) ((env-ref 1) (env-ref 0) (arg-ref 0))) (env-ref 1))))))))))) (corelib:car (arg-ref 1))) (arg-ref 1))))))
(corelib:def '*current-macro-env-holder* (corelib:cons nil nil))
(corelib:def 'set-macro-env (lambda (1) (corelib:set-car! *current-macro-env-holder* (arg-ref 0))))
(corelib:def 'getcurmacroenv (lambda (0) (corelib:car *current-macro-env-holder*)))
(set-macro-env (corelib:getmacroenv))
(corelib:def 'bootlib:compile (lambda (2 (0 self)) (if (if (corelib:list? (arg-ref 1)) (corelib:eqv? 'top-begin (corelib:car (arg-ref 1))) nil) (corelib:cons 'top-bdone (inner.map (lambda (1 (0 env)) ((lambda (1) (begin (corelib:eval (arg-ref 0)) (arg-ref 0))) ((env-ref 0) nil (arg-ref 0)))) (corelib:cdr (arg-ref 1)))) (bootlib:postcompile (arg-ref 0) (bootlib:expand0 (env-ref 0) (getcurmacroenv) (arg-ref 1))))))
(corelib:def 'bootlib:expand (lambda (1) (bootlib:expand0 bootlib:compile (getcurmacroenv) (arg-ref 0))))
(corelib:def 'screen-symbol-stub (corelib:cons nil nil))
(corelib:def 'screen-symbol (lambda (1) ((lambda (1 (0 arg)) (if (arg-ref 0) ((arg-ref 0) (env-ref 0)) (env-ref 0))) (corelib:car screen-symbol-stub))))
(corelib:def 'atom-to-string (lambda (1) (if (corelib:null? (arg-ref 0)) "()" (if (corelib:string? (arg-ref 0)) (corelib:string-append "\"" (corelib:string-append (corelib:string-escape (arg-ref 0)) "\"")) (if (corelib:symbol? (arg-ref 0)) (corelib:symbol->string (screen-symbol (arg-ref 0))) (if (corelib:number? (arg-ref 0)) (corelib:number->string (arg-ref 0)) (if (corelib:char? (arg-ref 0)) (corelib:string-append "#\\" (if (corelib:eq? (arg-ref 0) #\Newline) "Newline" (if (corelib:eq? (arg-ref 0) #\Tab) "Tab" (if (corelib:eq? (arg-ref 0) #\Space) "Space" (if (corelib:eq? (arg-ref 0) #\LBR) "LBR" (if (corelib:eq? (arg-ref 0) #\RBR) "RBR" (if (corelib:eq? (arg-ref 0) #\Semicolon) "Semicolon" (if (corelib:< (corelib:ascii (arg-ref 0)) (corelib:ascii #\Space)) (corelib:string-append "ASCII" (corelib:any->string (corelib:ascii (arg-ref 0)))) (arg-ref 0))))))))) (if (corelib:boolean? (arg-ref 0)) (if (corelib:r_debool (arg-ref 0)) "#t" "#f") (corelib:string-append "?:" (corelib:any->string (arg-ref 0)))))))))))
(corelib:def 'innerlist (lambda (3 (0 self)) (corelib:string-append ((arg-ref 0) (arg-ref 1) (corelib:car (arg-ref 2))) (if (corelib:null? (corelib:cdr (arg-ref 2))) "" (if (corelib:pair? (corelib:cdr (arg-ref 2))) (corelib:string-append " " ((env-ref 0) (arg-ref 0) (arg-ref 1) (corelib:cdr (arg-ref 2)))) (corelib:string-append " . " (atom-to-string (corelib:cdr (arg-ref 2)))))))))
(corelib:def 'lbr "(")
(corelib:def 'rbr ")")
(corelib:def 'outerlist (lambda (2 (0 self)) (if (corelib:null? (arg-ref 1)) "()" (if (corelib:list? (arg-ref 1)) (if (if (corelib:cdr (arg-ref 1)) (corelib:list? (corelib:cdr (arg-ref 1))) nil) (if (if (corelib:= (arg-ref 0) 1) (corelib:eqv? 'quote (corelib:car (arg-ref 1))) nil) (corelib:string-append "'" ((env-ref 0) 0 (bootlib:cadr (arg-ref 1)))) (if (if (corelib:= (arg-ref 0) 1) (corelib:eqv? 'quasiquote (corelib:car (arg-ref 1))) nil) (corelib:string-append "`" ((env-ref 0) 2 (bootlib:cadr (arg-ref 1)))) (if (if (corelib:= (arg-ref 0) 2) (corelib:eqv? 'unquote (corelib:car (arg-ref 1))) nil) (corelib:string-append "," ((env-ref 0) 1 (bootlib:cadr (arg-ref 1)))) (if (if (corelib:= (arg-ref 0) 2) (corelib:eqv? 'unquote-splicing (corelib:car (arg-ref 1))) nil) (corelib:string-append ",@" ((env-ref 0) 1 (bootlib:cadr (arg-ref 1)))) (corelib:string-append lbr (corelib:string-append (innerlist (env-ref 0) (arg-ref 0) (arg-ref 1)) rbr)))))) (corelib:string-append lbr (corelib:string-append (innerlist (env-ref 0) (arg-ref 0) (arg-ref 1)) rbr))) (atom-to-string (arg-ref 1))))))
(corelib:def 'to-string (lambda (1) (outerlist 1 (arg-ref 0))))
(corelib:def 'read-compile-eval0 (lambda (1) ((lambda (1) ((lambda (1 (0 arg)) (corelib:cons (env-ref 0) (arg-ref 0))) (corelib:eval (arg-ref 0)))) (bootlib:compile nil (arg-ref 0)))))
(corelib:def 'bootlib:core:read-int-eval (lambda (1) (corelib:cdr (read-compile-eval0 (arg-ref 0)))))
(corelib:def 'bootlib:core:read-int-eval-hook (corelib:cons bootlib:core:read-int-eval nil))
(corelib:def 'read-int-eval (lambda (1) ((corelib:car bootlib:core:read-int-eval-hook) (arg-ref 0))))
(corelib:def 'read-compile-eval read-int-eval)
(corelib:def 'to-string-top (lambda (1 (0 self)) (if (if (corelib:list? (arg-ref 0)) (if (corelib:eqv? 'top-bdone (corelib:car (arg-ref 0))) #t (corelib:eqv? 'top-begin (corelib:car (arg-ref 0)))) nil) ((lambda (2 (0 self) (0 env)) (if (corelib:null? (arg-ref 1)) (arg-ref 0) ((env-ref 0) (corelib:string-append (arg-ref 0) (corelib:string-append ((lambda (1) (if (arg-ref 0) (arg-ref 0) "")) ((env-ref 1) (corelib:car (arg-ref 1)))) "\n")) (corelib:cdr (arg-ref 1))))) "" (corelib:cdr (arg-ref 0))) (if (if (corelib:null? (arg-ref 0)) #t (bootlib:not (corelib:list? (arg-ref 0)))) nil (outerlist 1 (arg-ref 0))))))
(corelib:def 'read-compile-eval-dump (lambda (1) (to-string-top (corelib:car (read-compile-eval0 (arg-ref 0))))))
