(function trajan (g v0)
  (let* ((g.l (mkhash)) (g.i (mkhash))
         (myval (fun (x)
                  (if (null? x) -1 x)))
         (mymin (fun (a b)
                  (let ((a* (myval a)) (b* (myval b)))
                    (if (< a* b*) a* b*))))
         (stack (mkref nil))
         (index (mkref 0)))
    (collector (SCCadd SCC)
    (use-ohash (g g.l g.i)
       (let loop ((v v0))
         (g.i! v (deref index))
         (g.l! v (deref index))
         (r! index (+ 1 (deref index)))
         (r! stack (cons v (deref stack)))
         (foreach (n (g> v))
           (if (= (myval (g.i> n)) -1)
               (begin
                 (loop n)
                 (g.l! v (mymin (g.l> v) (g.l> n))))
               (when (memq n (deref stack))
                     (g.l! v (mymin (g.l> v) (g.i> n)))
                     )))
         (when (= (g.l> v) (g.i> v))
               (format
                (let iloop ((s (deref stack)) (c nil))
                  (alet nc (cons (car s) c)
                        (if (eqv? (car s) v) (list nc (cdr s))
                            (iloop (cdr s) nc))))
                (c s)
                (r! stack s)
                (SCCadd c)))))
    (return (SCC)))))

(function graph2graph (g)
  (with-ohash (h)
    (foreach (e g)
      (h! (car e) (cdr e)))
    (return h)))

