% literate:

\section{Loop invariant motion}

Here we're always moving loop invariants outside, without any cost considerations.
If a register pressure is becoming an issue, another pass may always do a rematerialisation.


\subsection{Utility functions}

\pfcode{
%"A more usable representation of the loop analysis results"
function genssa2_cache_loops(ls) {
  loops = mkhash();
  add(nm, v) = ohashput(loops, nm, v:ohashget(loops, nm));
  iter l in cadr(ls) do {
     match l with
       inaloop(bb, L) ->
          {add(%Sm<<("body-",L), bb);
           add(%Sm<<("rev-", bb), L)}
     | entryedge(L,f,t) ->
          {add(%Sm<<("entryedge-",L),[f;t]);
           add(%Sm<<("entry-",L), t)}
     | exitedge(L,f,t) ->
          {add(%Sm<<("exitedge-",L),[f;t]);
           add(%Sm<<("exit-",L), f)}
     | backedge(L,f,t) ->
          {add(%Sm<<("backedge-",L),[f;t])}
     | subloop(L1, L2) ->
          ohashput(loops, %Sm<<("innerloop-", L1, "--", L2), true)
     | else -> []};
  return loops}}

\pfcode{
function genssa2_get_loop_body(loops, L) {
   ohashget(loops, %Sm<<("body-", L))}}

\pfcode{
function genssa2_get_loop_entry(loops, L) {
   es = ohashget(loops, %Sm<<("entry-", L));
   match es with
      [one] -> one
    | else -> []}}

\pfcode{
function genssa2_get_loop_backedge(loops, L) {
   es = ohashget(loops, %Sm<<("backedge-", L));
   match es with
      [one] -> one
    | else -> []}}

\pfcode{
function genssa2_get_loop_exitedge(loops, L) {
   es = ohashget(loops, %Sm<<("exitedge-", L));
   match es with
      [one] -> one
    | else -> []}}


\pfcode{
function genssa2_get_loop_entry_edge(loops, L) {
   es = ohashget(loops, %Sm<<("entryedge-", L));
   match es with
      [one] -> one
    | else -> []}}

\pfcode{
function genssa2_is_innerloop(loopsht, l, r) {
   ohashget(loopsht, %Sm<<("innerloop-",l,"--",r))}}

\pfcode{
function genssa2_is_in_a_loop(loopsht, bb) {
   loops = ohashget(loopsht, %Sm<<("rev-", bb));
   if(loops) car(qsort(fun(l, r) genssa2_is_innerloop(loopsht, l, r), loops))}}


\subsection{Invariant analysis}

A register is a loop invariant iff its dependency sub--graph sitting inside a loop is {\sl pure} and
  only depend on the external variables from the dominators of the loop entry block (excluding the loop entry
  basic block itself).

\pfcode{
%"Assuming id is in the innermost loop L,
  check if it is an invariant"
function genssa2_is_a_loop_invariant(
           domtree, deps, loops, L, oright, id, op)
{  iddeps = ohashget(deps, id);
   entry = genssa2_get_loop_entry(loops, L);
   if (entry) { // if more than one entries, retreat
      dset = filter d in ohashget(domtree, entry) as not(d===entry);
      ret = foldl(fun(l,r) l&&r, true,
                  map i in iddeps do
                     aif(chk = ohashget(oright, i))
                          memq(chk, dset)
                     else true);
      if(ret) return genssa2_get_loop_entry_edge(loops, L) else []}}}

\pfcode{
function genssa2_find_loop_invariants(env, src, loops) {
   // 1. Preparations
  <[cfg;bbs]> = genssa2_cache_cfg(src);
   defs = genssa2_cache_defs(src);
   domtree = graph_dominators(cfg, 'entry');
   oright = genssa2_cache_origs(src);
   deps = genssa2_make_depgraph(src, []);
   loopsht = genssa2_cache_loops(loops);
   
   // 2. Find candidates
   collector(addinvariant, getinvariants) {
     visit:genssa2(top: src) {
      deep bblock {
        b -> {
          // Find the innermost loop for this bb
          loopnest = genssa2_is_in_a_loop(loopsht, name);
          // Do not even bother if it's not in a loop
          if (loopnest) iter o in ops do o(name, loopnest)}};
       deep oppair: fun(bb, L) {
          if (op) {
             chk = genssa2_is_a_loop_invariant(domtree, deps, loopsht,
                     L, oright, name, op);
             if (chk) addinvariant([bb;name;op;L;chk])}};
       deep iop {
          phi -> [] // cannot be an invariant
        | select -> node // maybe
        | call -> if (genssa2_is_pure(env, dst)) node else []}};
     inv = getinvariants();
     if(inv) {
       return inv
     }}}}

\pfcode{
function genssa2_move_loop_invariants(src, invariants) {
   // Prepare invariants
   invariantsht = mkhash(); edges = mkhash();
   iter [bb;name;op;L;ft] in invariants do {
      ohashput(edges, bb, ft);
      ohashput(invariantsht, bb, ohashget(invariantsht, bb)::[[name;op]])};

   // Loop invariants are relocated into new intermediate basic blocks that
   // are injected into the entry edges
   newedges = mkhash();
   killed = mkhash();

   injht = mkhash();
   hashiter(fun(name, ops) {
       <[f;t]> = ohashget(edges, name);
        iter [dst;op] in ops do {
           ohashput(killed, dst, dst)};
        nnm = %Sm<<(f,'--',t);
        chk0 = ohashget(newedges, nnm);
        bb1 = if (chk0) {
                tmp1 = ohashget(injht, nnm);
                match tmp1 with
                   'b'(edg, ops1, term) -> 'b'(edg, ops1::ops, term)
                 | else -> ccerror('OOPS'())
              } else {
                edg = gensym();
                ohashput(newedges, %Sm<<(f,'--',t), edg);
                return 'b'(edg, ops, 'br'(t))};
        ohashput(injht, nnm, bb1);
        }, invariantsht);
   injected = hashmap(fun(k,v) v, injht);

   rewrite_edge(f, t) = ohashget(newedges, %Sm<<(f, '--', t));
   delete_op(id) = ohashget(killed, id);
   rewrite_phis(bb, ops) =
      map o in ops do
         visit:genssa2(oppair: o) {
            deep phiarg {
               a -> 
                 aif (chk = rewrite_edge(src, bb))
                       mk:node(src = chk)
                  else node }};
   rewrite_term(t, bb) =
      visit:genssa2(term: t) {
         deep labident:
           aif(chk = rewrite_edge(bb, node)) chk
               else node};
   visit:genssa2(top: src) {
      deep code: bs::injected;
      deep bblock {
         b -> { ops1 = map append ops do ops;
                mk:node(ops = rewrite_phis(name, ops1),
                        t = rewrite_term(t, name))}};
      deep oppair: if (delete_op(name)) [] else [node]}}}


\pfcode{
function genssa2_loop_invariants(env, src, chgp) {
  loops = genssa2_loops(src);
  inv = genssa2_find_loop_invariants(env, src, loops);
  if(inv) {
    chgp := true;
    return genssa2_move_loop_invariants(src, inv)
  } else src}}


\section{Induction variables}


A variable is an induction variable of a loop L iff:

\begin{itemize}
\item It is a $\varphi$ node located in the loop entry node, with only two entries
\item There is a circular dependency on itself
\item All of the circular dependency path is within the loop L (it does not matter if there is another
      circular dependency in an outer loop)
\item All of the dependency path components are pure (otherwise no further analysis is useful) and
      no $\varphi$s, with only the entry edge one being a $\varphi$. The only exception for this
      rule is an inferior induction variable with computable bounds, but this case is a big fat TODO.
\end{itemize}

Once the determine that this is an induction variable we're recording it as follows:

\verb|inductive(loop-id, reg, path, [loop-nodes], init, step)|.

We should mark induction variables starting from the innermost loops.

\pfcode{
function genssa2_describe_induction_step(env, defs, reg,
               depg, entry, revh)
{ vis = mkhash();
  subst(r0) =
    do loop(r = r0) {
     if ( r === reg ) return 'rec'()
     else {
       df = ohashget(defs, r);
       if (not(df)) return 'var'(r)
       else if (ohashget(vis, r)) return 'var'(r)
       else {
         ohashput(vis, r, r);
         nop = visit:genssa2(iop: df) {
                deep expr {
                  var -> {aif (chk0 = ohashget(revh, id))
                               'indvar'(id, chk0)
                          else if (ohashget(depg, id)) loop(id)
                          else node}
                | else -> node}};
         return 'op'(nop)}}};
  visit:genssa2(iop: ohashget(defs, reg)) {
     deep phiarg {
        a -> if (src === entry) [] else v};
     deep iop {
        phi -> {match (filter a in args as a) with
                  [one] -> one
                | else -> ccerror('OOPS'(args))}
      | else -> ccerror('IMPOSSIBLE'(node))};
     deep expr { var -> if (ohashget(depg, id)) subst(id) else node
               | else -> node}}}}

\pfcode{
function genssa2_maybe_induction(env, loops, defs, deps, origs, src)
collector(add, get) {
  //   In order to do so we'd have to postpone purity check and
  //   do it in a loop, eliminating inner inductive variables one by one.

   innerloop(bb) = {
      // Return a name of the innermost loop for this node, or []
      return genssa2_is_in_a_loop(loops, bb)};
   
   getloopnodes(L) = {
      // Cache all the nodes of a loop L
      l = ohashget(loops, %Sm<<("body-", L));
      ht = mkhash();
      iter l do ohashput(ht, l, l);
      return ht};

   isinaloop(lh, reg) =
      aif (chk = ohashget(origs, reg))
          ohashget(lh, chk);
   
   follow_deps(lh, entry) = {
      // Only follow the register dependencies that lie in
      // a given loop (lh is a hashtable).
      
      ht = mkhash();
      do loop(e = entry) {
         if (ohashget(ht, e)) []
         else {
            refs = ohashget(deps, e);
            lrefs = filter r in refs as isinaloop(lh, r);
            ohashput(ht, e, lrefs);
            iter r in lrefs do loop(r)}};
      return ht};

   iscircular(ht, entry) = {
      // Check if there are circular dependencies in a graph
      vis = mkhash();
      do loop(e = entry) {
         if (ohashget(vis, e)) true
         else {
           ohashput(vis, e, e);
           do iloop(r = ohashget(ht, e)) {
              match r with
                hd:tl -> if(loop(hd)) true else iloop(tl)
              | else -> []}}}};

   ispure(reg, r) = {
      // Check if the register definition is pure and not a phi
      if (r === reg) true
      else {
        chk = ohashget(defs, r);
        visit:genssa2(iop: chk) {
           deep iop {
              phi -> []
            | select -> true
            | call -> genssa2_is_value_pure(env, chk)
            | else -> []}}}};

   isnpure(reg, k) = genssa2_is_value_pure(env, ohashget(defs, k));
   isnnpure(rev, reg, k) = {
      if (ohashget(rev, k)) true
      else ispure(reg, k)};

   loopdescr(L) = {
      // TODO: may want more information here
      ohashget(loops,%Sm<<("body-",L));
   };

   getloopentryedge(L) = {
      chk = ohashget(loops, %Sm<<("entryedge-", L));
      match chk with
        [[f;t]] -> f
        //TODO!
      | else -> ccerror('NOENTRYEDGE'(L, chk))};

   initvalue(L, reg) = {
      edge = getloopentryedge(L);
      visit:genssa2(iop: ohashget(defs, reg)) {
         deep phiarg {
            a -> if (src===edge) v else []};
         deep iop {
            phi -> {r = filter a in args as a;
                    match r with [one] -> one
                               | else -> ccerror('NO-ENTRY'(reg))}
         | else -> ccerror('IMPOSSIBLE'(node))}}};

   makestep(L, reg, depg, revh) = {
      // TODO
      entry = getloopentryedge(L);
      genssa2_describe_induction_step(env, defs, reg, depg, entry, revh)};
      
   tryinduct(L, reg) = {
      // 1. Build a sub-graph of the reg dependency graph
      //    which lies entirely within L.
      Lnodes = getloopnodes(L);
      depg = follow_deps(Lnodes, reg);
      // 2. If it is still circular, check if all its elements
      //    are pure.
      if (iscircular(depg, reg)) {
         depl = hashmap(fun(k,v) k, depg);
         purep = foldl(fun(l,r) l&&r, true,
                       map d in depl do ispure(reg, d));
      //   3. Still here? Add an 'inductive' node.
         if (purep) {
            add('inductive'(L, reg, loopdescr(L), depl,
                            'init'(genssa2_to_algebraic(env, initvalue(L, reg))),
                            genssa2_to_algebraic(env, makestep(L, reg, depg, mkhash()))))
         } else {
           npurep = foldl(fun(l,r) l&&r, true,
                          map d in depl do isnpure(reg, d));
           if(npurep) add('maybeinductive'(L, reg, depl))}}};

   refineinduct(lst) =
      do loop(l = lst, level = 0) collector(iadd, iget) {
         chgp = mkref([]); rev = mkhash();
         todo = map append l in lst do {
            match l with
               'inductive'(LN, r, LPth, pth, @_) -> {
                  iadd(l); ohashput(rev, r, LN); []}
            |  'maybeinductive'(L, reg, nppth) -> [l]};
         nxt = map append t in todo do {
            match t with
                'maybeinductive'(L, reg, nppth) -> {
                   chk = foldl(fun(l, r) l&&r, true,
                               map p in nppth do isnnpure(rev, reg, p));
                   if(chk) {
                      chgp := true;
                      depg = mkhash();
                      iter d in nppth do ohashput(depg, d, d);
                      iadd('inductive'(L, reg, loopdescr(L), nppth,
                                       'init'(genssa2_to_algebraic(env, initvalue(L, reg))),
                                       genssa2_to_algebraic(env, makestep(L, reg, depg, rev))));
                      return []}
                   else return [t]}};
          // Check if we're not trying to introduce potential induction variables from different
         // loop levels that depend on each other:
         // TODO....
         if (level > 19) {
            println('CANNOT-REFINE-INDUCTION'(iget(), nxt));
         };
         if (nxt && ^chgp && level > 20) loop(iget()::nxt, level + 1) else iget()};
           
   visit:genssa2(top: src) {
     deep iop(bb, dstreg) {
       phi -> {
          L = innerloop(bb);
          if (L && length(args)==2) { // In da loop
             tryinduct(L, dstreg)}}
     | else -> []};
     deep oppair: fun(bb) op(bb, name);
     deep bblock {b -> iter o in ops do o(name)}};

   candidates = get();
   // Now, iterate over candidates until there are no more changes
   return refineinduct(candidates)}}

\pfcode{
function genssa2_induction(env, src) {
   loops = genssa2_loops(src);
   defs = genssa2_cache_defs(src);
   origs = genssa2_cache_origs(src);

   deps = genssa2_make_depgraph(src, []);
   loopsht = genssa2_cache_loops(loops);
 
   l = genssa2_maybe_induction(env, loopsht, defs, deps, origs, src);
   return [[loops; loopsht; defs; origs; deps]; l]
}}

\section{Strength reduction}

An expression $I * C$, where $I$ is an induction variable in form of $I_n \leftarrow I_{n-1} + C_I$, can be
replaced with a new induction variable $Y_n \leftarrow Y_{n-1} + C_I * C, Y_0 \leftarrow I_0 * C$.

TODO: strength reduction can result in multiple equivalent induction variables, and  CSE is not smart enough
to see the equivalence of phi nodes. We have to do it separately, by comparing the induction variable briefs
instead.

%example:
%%(inductive L2 Z1079358 ... ... (init (const (const (ir2const) (integer 327 i32)))) (add ir2-binop:Add (rec) (const (const (ir2const) (integer 327 i32)))))
%%(inductive L2 Z1079351 ... ... (init (const (const (ir2const) (integer 327 i32)))) (add ir2-binop:Add (rec) (const (const (ir2const) (integer 327 i32)))))


\pfcode{
function genssa2_get_inductive_increment(step) {
   match step with
     'add'(op, 'rec'(), 'const'(c)) -> [op;c]
   | 'add'(op, 'const'(c), 'rec'()) -> [op;c]
   | else -> []}}

\pfcode{
function genssa2_is_strength_reducible(add, env, defs, indvars, inds, loopsht, origs, bb) {
   isincrement(nm) = {
      <'inductive'(Lnm, Vnm, E0, E1, I0e, S0)> = ohashget(inds, nm);
       return genssa2_get_inductive_increment(S0)};
   isinvariant(c,L) = {
      // Check if a variable is defined outside of the loop body
      lbody = ohashget(loopsht, %Sm<<("body-", L));
      match c with
         'const'(x) -> true
       | 'var'(id) -> {
           o = ohashget(origs, id);
           if (not(o))  true
           else if (memq(o, lbody)) [] else true
         }
       | else  -> []};
   visit:genssa2(bblock: bb) {
      deep oppair: op(name);
      deep iop(dstreg) {
        call -> {
           t = genssa2_describe_simple(env, defs, indvars, 'var'(dstreg));
           s = genssa2_to_algebraic(env, t);
           match s with
             'mul'(op, 'indvar'(v1,l1), c1) ->
                if(isincrement(v1) && isinvariant(c1, l1)) add('mul'(dstreg, op, v1, c1, l1))
           | 'mul'(op, c1, 'indvar'(v1,l1)) ->
                if(isincrement(v1) && isinvariant(c1, l1)) add('mul'(dstreg, op, v1, c1, l1))
           | else -> []
        }
      | else -> []}}}}

\pfcode{
function genssa2_strength_reduction(icache, env, src, modp) {
  <[cache; ind]> = icache;
  iter i in ind do  println('INDUC'(i));
  <[loops; loopsht; defs; origs; deps]> = cache;
   indvars = mkhash(); inds = mkhash();
   iter [_;L;V;@_] in ind do ohashput(indvars, V, L);
   iter i in ind do {
    <'inductive'(Lnm, Vnm,@_)> = i;
     ohashput(inds, Vnm, i);
   };
   
   // 1. Go through all the loop bodies that have induction variables, and check if
   // there are expressions that can be strength-reduced
   rewrites = collector(add, get) {
     visit:genssa2(top:src) {
       deep  bblock { b -> if (genssa2_is_in_a_loop(loopsht, name)) {
          genssa2_is_strength_reducible(add, env, defs, indvars, inds, loopsht, origs, node)
       }}};
     return get()};
   // 2. Insert the lifted strength-reduced phis into corresponding loop entry BBs
   if (rewrites) {
       modp := true;
       lh_ht = mkhash(); le_ht = mkhash(); rw_ht = mkhash();
       // Fill the tables:
       iter [xop;dstreg;op;iv;cv;L] in rewrites do {
          lh = car(ohashget(loopsht, %Sm<<("entry-", L)));
          le = car(car(ohashget(loopsht, %Sm<<("entryedge-", L))));
          initvar = gensym();
          newnm = gensym();
         <'inductive'(Lnm, Vnm, E0, E1, I0e, S0)> = ohashget(inds, iv);
         <[addop;C]> = genssa2_get_inductive_increment(S0);
          nnm1 = gensym();
          cvx = genssa2_from_algebraic(env, cv);
          // S + C_I * C
          stepexprs = [[nnm1;'call'([], op, C, cvx)];
                       [newnm;'call'([], addop, 'var'(dstreg), 'var'(nnm1))]];
          I0 = genssa2_from_algebraic(env, cadr(I0e));
          initexpr = 'call'([], op, I0, cvx);
          ohashput(lh_ht, lh, [dstreg;initvar;newnm;stepexprs;L] : ohashget(lh_ht, lh));
          ohashput(le_ht, le, [initvar; initexpr] : ohashget(le_ht, le));
          ohashput(rw_ht, dstreg, true);
       };
       /////////////////
       is_a_loop_header(name) = ohashget(lh_ht, name);
       is_a_loop_entry(name) = ohashget(le_ht, name);
       is_a_rewrite(name) = ohashget(rw_ht, name);
       visit:genssa2(top:src) {
         deep bblock {
           b -> {
              preposts = aif(chk = is_a_loop_header(name)) {
                map chk do {
                <[nm;init;newnm;stepentries;L]> = chk;
                 entry = car(car(ohashget(loopsht, %Sm<<("entryedge-",L))));
                 backedge = caar(ohashget(loopsht, %Sm<<("backedge-",L)));
                 newentry = [nm; 'phi'('a'(entry, 'var'(init)), 'a'(backedge, 'var'(newnm)))];
                 [[newentry]; stepentries]}} else [[[];[]]];
              pre = map append [p;_] in preposts do p;
              post = map append [_;p] in preposts do p;
              post = aif(chk = is_a_loop_entry(name)) {
                 post :: chk
              } else post;
              mk:node(ops = pre::((map append o in ops do o)::post))}};
         deep oppair: if(is_a_rewrite(name)) [] else [node]}
   } else src
}}

\section{Loop exit conditions analysis}

If a loop exit condition is a function of loop induction variables and loop invariants (or constants) only,
we can check it for certain patterns:

\begin{itemize}
\item $cmp(L_{i}, I)$ --- gives a bound for a linear induction variable, which may later be used to fold
   a $L_{ind}$ outside of the loop and be used to define value set inside the loop.
\item $eq(X_{i}, I)$ --- folds to I outside of a loop, no matter how $X_{i}$ steps.
\end{itemize}

\pfcode{
function genssa2_loop_exits(env, cache, ind, src)
collector(addexit, getexits) {
   // 1. Get loop exit conditions
  <[[lx;loops]; loopsht; defs; origs; deps]> = cache;
  
   exits = mkhash();
   iter l in loops do match l with
      exitedge(L,f,t) -> { ohashput(exits, f, [L;t]); };

   indht = mkhash();
   iter i in ind do
       match i with
          inductive(L, reg, ld, depl, init, step) -> {
             ohashput(indht, reg, L)};
            
   describe(L, c) = {
      lbody = ohashget(loopsht, %Sm<<("body-", L));
      vis = mkhash();
      subst(r0) =
        do loop(r = r0) {
           chk1 = ohashget(indht, r);
           if (ohashget(vis, r)) 'var'(r)
           else if (chk1) {
             return 'indvar'(r, chk1)
           } else {
             ohashput(vis, r, r);
             df = ohashget(defs, r);
             if (df) {
                o = ohashget(origs, r);
                if (memq(o, lbody)) {
                   nop = visit:genssa2(iop: df) {
                      deep iop {
                         phi -> []
                       | else -> node};
                      deep expr {
                         var -> loop(id)
                       | else -> node}};
                   if (nop) return 'op'(nop)
                       else return 'var'(r)}
                else 'var'(r)}
             else 'var'(r)}};
     visit:genssa2(expr:c) {
        deep expr {
           var -> subst(id)
         | else -> node}}};

   describe_alg(L,c) = genssa2_to_algebraic(env, describe(L, c));
   visit:genssa2(top: src) {
      deep bblock { b -> t(name) };
      deep term(bb) {
        brc -> {
           chk = ohashget(exits, bb);
           match chk with
             [L;ex] ->
               {neg = (fl === ex);
                addexit('exit'(bb, ex, L, neg, describe_alg(L, c)))}}
      | else -> []}};
   exits = getexits();
   return exits
}}

Useful explanations for induction variables and exit conditions include the following patterns:

\begin{itemize}
  \item $i_0 = C_0, i \leftarrow i + C_1, [i < C_2]$ --- a constant bound loop, with value of $i$ known on a loop exit,
        and a total number of iterations being a known constant (affecting the exit values of all the other induction variables).
        There must be only one exit in such a loop.
\end{itemize}

\pfcode{
function genssa2_loop_bounds(env, ind, exits)
collector(addcandidate, getcandidates) {
   // Select the loops with one exit only, which is matching a pattern
   //      (compop (indvar X) (const ...))
   //    or
   //      (compop (const ...) (indvar X))
   //
   //    And indvar X definition is matching a pattern
   //      ((init (const ...)) (step (arithmetic (rec) (const ...))))
   //    or
   //      ((init (const ...)) (step (arithmetic (const ...) (rec))))

   // 1. Cache the candidate constant induction variables
   indht = mkhash();
   addind(id, ic, stepop, dir, sc) = ohashput(indht, id, [ic; stepop; dir; sc]);
   iter i in ind do {
      match i with
         'inductive'(L, regnm, loopnodes, deps, 'init'('const'(ic)),
                        [stepop; op1; opL; opR]) -> {
             match [opL; opR] with
                ['rec'();'const'(sc)] -> addind(regnm, 'const'(ic), stepop, 'lr', 'const'(sc))
              | ['const'(sc);'rec'()] -> addind(regnm, 'const'(ic), stepop, 'rl', 'const'(sc))}};

   // 2. Count the exits
   exitsht = mkhash();
   iter e in exits do {
      match e with
         'exit'(bb,ex, L, @_) -> ohashput(exitsht, L, bb:ohashget(exitsht, L))};
 
   // 3. Check the candidate constant exit conditions
   isconstind(V) = ohashget(indht, V);
   iscmpop(op) =
     case op { 'eq' | 'neq'| 'gr' | 'ge' | 'lt' | 'le' -> true | else -> []};

   makeop(neg, dir, op, c) = {
     <L:R> = if(dir==='lr') 'rec'():c else c:'rec'();
      ret = [op; '_'; L; R];
      if (not(neg)) return genssa2_compop_negate(ret) else ret};

   makestepop(op, dir, c) = {
     <L:R> = if(dir==='lr') 'rec'():c else c:'rec'();
     return [op; '_'; L; R]};

   makebounds(L, neg, dir, op, V, c) = {
     <[ic;stepop;sdir;sc]> = ohashget(indht, V);
      addcandidate('constloop'(L, V, 'init'(ic), 'step'(makestepop(stepop, sdir, sc)), 'bound'(makeop(neg, dir, op, c))))
   };
                   
   check(L, neg, dir, op, V, c) =
    if(length(ohashget(exitsht,L))==1) {
       if(iscmpop(op) && isconstind(V)) {
         makebounds(L, neg, dir, op, V, c)
       }};
   iter e in exits do {
      match e with
         'exit'(bb,ex, L, neg, [op;op1;'indvar'(V,Lv);'const'(c)]) ->
             check(L, neg, 'lr', op, V, 'const'(c))
      |  'exit'(bb,ex, L, neg, [op;op1;'const'(c);'indvar'(V,Lv)]) ->
             check(L, neg, 'rl', op, V, 'const'(c))};
   return getcandidates();
}}

\pfcode{
function genssa2_loop_bounds_static(env, lb) {
  // Further simplify the static loop bounds, infer the precise integer intervals possible
  getinteger(c) = match c with const(c0) ->
                    genssa2_env_getinteger(env, c0)
                  | else -> ccerror('IMPOSSIBLE'(c));
  normalise_step(op,L,R) = {
    match [op;L;R] with
       add(rec(),x) -> getinteger(x)
     | add(x,rec()) -> getinteger(x)
     | sub(rec(),x) -> 0-getinteger(x)
     | else -> []};
  max(a,b) = if(a>b) a else b;
  min(a,b) = if(a<b) a else b;
  abs(a) = if(a>0) a else 0-a;
  normalise_limit(initc, step, op, L, R) = 
  do loop(op=op, L=L, R=R) {
    match [op;L;R] with
       le(rec(),x) -> {
          // TODO: check off intervals
          c1 = getinteger(x);
          d = c1 - initc;
          n = d / step;
          if (initc + d*n == c1) return (c1+1) else return c1}
     | lt(rec(),x) -> {
          c1 = getinteger(x);
          return c1}
     | gr(rec(),x) -> {
          cl = getinteger(x);
          return cl}
     | ge(rec(),x) -> {
          c1 = getinteger(x);
          d = initc - c1;
          n = d / abs(step);
          if (initc - d*n == c1) return (c1+1) else return c1}
     | le(x,rec()) -> loop('ge','rec'(),x)
     | lt(x,rec()) -> loop('gr','rec'(),x)
     | ge(x,rec()) -> loop('le','rec'(),x)
     | gr(x,rec()) -> loop('lt','rec'(),x)
       // TODO
     | else -> []};
  normalise_count(i,s,l) = {
     nsteps = (max(i,l) - min(i, l)) / abs(s);
     return nsteps
  };
  map append constloop(Lp,V,init(I),step([op;_;L; R]),bound([bop;_;bL;bR])) in lb do {
    initc = getinteger(I);
    istep = normalise_step(op,L,R);
    if(istep) {
      blimit = normalise_limit(initc, istep, bop, bL, bR);
      if (blimit) {
         count = normalise_count(initc, istep, blimit);
        ['constloop'(Lp,V, initc, istep, blimit, count)]
      }}}}}

\section{Loop unrolling}

Once again, we're not after any performance optimisations here, so we can do the simplest
thing possible and rely on a number of consequent passes to clean up the mess.

The simplest loop unrolling, especially if we know the static bounds, is to copy the loop basic blocks
$N$ times (doing all the renaming required, of course), replacing the back edge with the next edge,
and induction phi with only its back edge branch.

%1. New names for all the basic blocks and regs. Entry bblock is getting a given name (see below)
%2. Clone basic blocks, renaming everything
%3. Back edge phi entries are getting the previous renames
%4. Back edge conditional branch is replaced with an unconditional one, pointing
%   to the newly generated name

\pfcode{
function genssa2_loop_unroll_inner(env, src, bbsh, loop, loopbackedge, loopexitedge, count, chgp) {

    newnames(loopbbs, entrybb, newentrybb) = {
      bht = mkhash();rht = mkhash();
      addbbrename(a,b) = ohashput(bht, a, b);
      addregrename(a,b) = ohashput(rht, a, b);
      visit:genssa2 (code: loopbbs) {
         deep bblock {
            b ->
               if (name === entrybb)
                  addbbrename(name, newentrybb)
               else addbbrename(name, gensym())};
         deep oppair: addregrename(name, gensym())};
      return bht:rht};

    rewrite(loopbbs, names, prevnames, backedge, exitedge, firstp, lastp, nextname) = {
     <bht:rht> = names;
     <pbht:prht> = prevnames;
      isloopbb(name)  = ohashget(bht, name);
      renamebb(name)  = aif(r = ohashget(bht, name)) r else name;
      renamereg(name) = aif(r = ohashget(rht, name)) r else name;
      prevrenamebb(name) = ohashget(pbht, name);
      prevrenamereg(name) = aif(r = ohashget(prht, name)) r else name;
      isbackedge(f, t) = (%Sm<<(f, "->", t) === backedge);
      isexitedge(f, t) = (%Sm<<(f, "->", t) === exitedge);
      rewriteexpr(e) =
        visit:genssa2 (expr: e) {
        deep expr {
           var -> mk:node(id = renamereg(id))
         | else -> node}};
      prevrewriteexpr(e) =
        visit:genssa2 (expr: e) {
        deep expr {
           var -> mk:node(id = prevrenamereg(id))
         | else -> node}};
      rewriteterm(t) =
        visit:genssa2 (term: t) {
           deep labident: renamebb(node);
           once expr { else -> rewriteexpr(node) }};
      rewritephi(bbname, regname, args) = {
        newargs = map append a in args do
           visit:genssa2 (phiarg: a) {
              deep phiarg {
                a -> if (firstp && isbackedge(src, bbname)) []
                     else if (isbackedge(src, bbname)) ['a'(prevrenamebb(src), prevrewriteexpr(v))]
                     else if (not(firstp) && not(isloopbb(src))) []
                     else if (firstp && not(isloopbb(src))) ['a'(src, v)]
                     else ['a'(renamebb(src), rewriteexpr(v))]}};
        return 'phi'(@newargs)};
      visit:genssa2 (code: loopbbs) {
          deep bblock {
             b -> {newnm = renamebb(name);
                   mk:node(name = newnm, ops = map o in ops do o(name), t = t(name))}};
          deep oppair: fun(bbname) {
             [renamereg(name); op(bbname, name)]};
          once iop {
             phi -> fun(bbname, regname) rewritephi(bbname, regname, args)
          |  deep -> { else -> fun(bbname, regname) node }};
          once term(bbname) {
             brc -> if(isbackedge(bbname, tr)) 'br'(nextname)
                    else if(isbackedge(bbname, fl)) 'br'(nextname)
                    else if(isexitedge(bbname, fl) && lastp) rewriteterm('br'(fl))
                    else if(isexitedge(bbname, tr) && lastp) rewriteterm('br'(tr))
                    else if(isexitedge(bbname, fl)) rewriteterm('br'(tr))
                    else if(isexitedge(bbname, tr)) rewriteterm('br'(fl))
                    else rewriteterm(node)
          |  br  -> if(isbackedge(bbname, dst)) 'br'(nextname)
                    else rewriteterm(node)
          |  else -> rewriteterm(node)};
          once expr { else -> rewriteexpr(node) }}};

   rewriteloop(loopbbs, entrybb, count, backedge, exitedge, exitname) = collector(addbb, getbbs) {
     ret = do loop(prevnames = (mkhash():mkhash()),
             prevnext = entrybb, nextname0 = gensym(),
             counter = 0) {
        nextname = if(counter==count) exitname else nextname0;
        nnm = newnames(loopbbs, entrybb, prevnext);
        newbbs = rewrite(loopbbs, nnm, prevnames, backedge, exitedge,
                         counter==0, counter==count, nextname);
        iter b in newbbs do addbb(b);
        if (counter < count)
           loop(nnm, nextname, gensym(), counter+1)
        else nextname:nnm
     };
     return ret:getbbs()};

    loopbbs = map l in loop do ohashget(bbsh, l);
    loopht = mkhash(); iter l in loop do ohashput(loopht, l, l);
   <[bf;entrybb]> = loopbackedge;
    backedge = %Sm<<(bf, "->", entrybb);
   <[ef;et]> = loopexitedge;
    exitedge = %Sm<<(ef, "->", et);
   <(nextname:(bht:rht)):newbbs> = rewriteloop(loopbbs, entrybb, count, backedge, exitedge, et);
    renamereg(id) = aif(chk = ohashget(rht, id)) chk else id;
    renamebb(id)  = aif(chk = ohashget(bht, id)) chk else id;
    chgp := true; // TODO - there must be bail out conditions, right?
    (map append bb in src do
      visit:genssa2(bblock: bb) {
        deep bblock {
           b -> if(ohashget(loopht, name)) []
                else [node]};
        deep expr {
           var -> mk:node(id = renamereg(id))
         | else -> node};
        deep phiarg {
           a -> if (ohashget(loopht, src)) mk:node(src = renamebb(src)) else node}}) :: newbbs}}


\pfcode{
function genssa2_loop_unroll_pragma(env, src, cache, lid) {
  <[[_;_]; loops; @_]> = cache;
   getloopentryedge(L) = {
      chk = ohashget(loops, %Sm<<("entryedge-", L));
      match chk with
        [[f;t]] -> f
      | else -> ccerror('NOENTRYEDGE'(L))};
   entry = getloopentryedge(lid);
  <[cfg;bbs]> = genssa2_cache_cfg(src);
   entrydef = ohashget(bbs, entry);
   collector(add, get) {
     visit:genssa2(bblock: entrydef) {
        deep iop {
           call -> 
              if (dst === '_pragma_unroll_all') add(true)
         | else -> []}};
     if (get()) return true else []}}}

\pfcode{
function genssa2_loop_unroll(env, src, cache, lr, chgp) {
 <[[_;_]; loops; @_]> = cache;
 <constloop(Lp, V, initc, istep, blimit, count)> = lr;
  if (genssa2_loop_unroll_pragma(env, src, cache, Lp) || (count < 16))
  {
    loopbackedge = genssa2_get_loop_backedge(loops, Lp);
    loopexitedge = genssa2_get_loop_exitedge(loops, Lp);
    loop = genssa2_get_loop_body(loops, Lp);
    bbsh = mkhash();
    srcc = visit:genssa2 (top: src) {
      once top { f -> body }};
    visit:genssa2(code: srcc) {
      once bblock { b -> ohashput(bbsh, name, node) }};
  
    nbody = genssa2_loop_unroll_inner(env, srcc, bbsh, loop, loopbackedge, loopexitedge, count, chgp);
    genssa2_kill_dangling(visit:genssa2 (top:src) {
      once top { f -> mk:node(body = nbody) }})}
   else src}}

%%%%%%%