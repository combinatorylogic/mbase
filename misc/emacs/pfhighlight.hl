define glogf = mkref([])

function fprintlnf(f, s)
{
   if(f) {
     fprintln(f,s); .net(f): ((System.IO.StreamWriter)f).Flush();
   }
}

function logg(str)
  fprintlnf(^glogf, str)

#(function pfcheckdll1 (nm)
   (logg (S<< "DLL: " nm))
   (alet chk (ohashget pf__dllglobcache nm)
              (if chk nil
                  (try
                   (begin
                     (logg (S<< "Reading dll: " nm))
                     (read-compile-eval `(usedll ,(Sm<< nm)))
                     (logg (S<< "Done reading dll: " nm))
                     (ohashput pf__dllglobcache nm nm))
                   t_Exception
                   (fun (e) (logg (S<< "ERRORRRR: " (->s e))) nil)))
              `(pldllref ,nm)
              ))

//#(r! pf_checkdll_external pfcheckdll1)

function psignal(msg)
   println(%S<<(msg,"|"))

function ploop11(env, str, p, fn, fst, ini)
{
  res = p(env, ^str);
  s = if(%peg-success?(car(res))) res else [];
  if (s) {
     fn(car(res));
     if(%peg-alldead?(cdr(res))) []
     else {
        str := cdr(res);
        ploop11(env, str, p, fn, fst, ini)
     }
  } else {
    f = %PegEnv.failure(env);
    fpos = match f with
                          [] -> cdr(res) :: "<ERROR>"
           | [loc;pos;names] -> [pos] :: %S<<(names);
    if(fst) {
       peg_cleanse_stream(cdr(res),fst);
       ploop11(env, mkref(ini), p, fn, [], [])
    } else {
       psignal('FAILMESSAGE'(sposloc(cdr(res)),sposloc(car(fpos))));
       psignal('FAILURE-POSITION'(
                %peg:decode-pos(sposloc(car(fpos))),
                cdr(fpos)));
    }
  }
}

function hlevl_consume_1(env, pf, dstream, rfun, pos)
{
  flush() = [];
  cadd(x) = [];
  xfun = rfun(cadd, flush);
  ploop11(env, dstream, pf, xfun, pos, ^dstream);
}

function parsing_loop(env, fps, pos)
 hlevl_consume_1(env, peg_pfront, fps,
                 fun(cadd, flush) fun(x) if(x) cadd(x),
                 pos)

define newline = #(ascii #\Newline);

function peg_makepos1(fline, fchar)
  return fchar + fline * 65536

function peg_mkstream1(ntotal, fline, fchar)
{
   p0 = %StreamEntry.new1([],[],0,-1,[]);
   do loop(n = 0, i = peg_makepos1(fline, fchar), c = p0, p = p0) {
      if(n == ntotal) {
         lst = %StreamEntry.new1([],[],i,-1,[]);
         %StreamEntry.next!(c, lst);
         %StreamEntry.chknext(p);
      } else {
        l = .net(): Console.Read();
        n1 = %StreamEntry.new1([], [], i, l, nil);
        %StreamEntry.next!(c, n1);
        loop(n+1,if(l == newline) %__peg:newline(i) else i+1,
             n1, p)
      }
   }
}

function peg_find_beg(s1, l1)
  do loop(x = s1, prv = []) {
    pos = %StreamEntry.idx(x);
    nxt = %StreamEntry.next(x);
    pl = car(%peg:decode-pos(pos));
    if(%eq?(pl, l1)) {
      return prv
    } else loop(nxt, x)
  }

function peg_find_end(s1, l3)
  return peg_find_beg(s1, l3) // should be similar

function peg_patch_overlapping(f, l)
{
  m = %StreamEntry.memos(f);
  lpos = %StreamEntry.idx(l);
  nxt = %StreamEntry.next(f);
  rmostpos = mkref(%StreamEntry.idx(nxt));
  rmost = mkref(nxt);
  m1 = collector(add,get) {
    iter m do {
      cm = cdr(m);
      if (not(%eqv?(%__peg-epic-fail__ , %__peg:memo-entry.ans(cm)))) {
       r = %__peg:memo-entry.pos(cm);
       i = %StreamEntry.idx(r);
       if (%<(i, lpos)) {
         add(m);
         if(%<(^rmostpos, i)) {
            rmostpos := i;
            rmost := r;
         }
       }
      }
    };
    get();
  };
  %StreamEntry.memos!(f, m1);
  return ^rmost
}

function peg_cleanse_stream(from, to)
{
  do loop(s = from, t = to) {
    if(s) {
       %StreamEntry.memos!(s, []);
       if(not(%eqv?(s,t)))
          loop(%StreamEntry.next(s),t);
    }
  }
}

function peg_patch_stream(s1, s1prev, s2, s1rest, delta)
{
  s1prim = mkref(s1);
  // Segment 1: for all in s1 to s1prev, remove overlapping memoes
  if(s1prev) {
   do loop(s = s1, n = s1prev) {
     if(s) {
       nxt = peg_patch_overlapping(s, n);
       if(not(%eqv?(s, n))) loop(nxt, n)
     }
   };
   %StreamEntry.next!(s1prev, s2);
  } else s1prim := s2;
  // Segment 2: add s2 to s1prev
  // Segment 3: add s1rest to the end of s2
  do loop(s = s2) {
    if(s) {
      nxt = %StreamEntry.next(s);
      if(%null?(nxt)) {%StreamEntry.next!(s, s1rest)}
      else {
       nxt1 = %StreamEntry.next(nxt);
       if(%null?(nxt1)) {%StreamEntry.next!(s, s1rest)} else
         loop(nxt)
      }
    }
  };
  // Segment 3: if there is a delta, update positions in s1rest
  if(not(%eq?(delta, 0)))
    do loop(s = s1rest, d = delta) {
      <[l;p]> = %peg:decode-pos(%StreamEntry.idx(s));
       nl = l + d;
       np = #(not.neth ((int nl) (int p))
               (leave ((object)(+ p (* nl 65536)))));
       %StreamEntry.idx!(s, np);
       nxt = %StreamEntry.next(s);
       if(nxt) loop(nxt, d);
    };
  // Return a modified s1:
  return ^s1prim
}

function peg_merge_streams(s1, s2, l1, l2, l3)
{
  // Navigate to the beginning of s2 in s1;
  // Here we assume that s2 starts at a beginning of a line
  s1prev = peg_find_beg(s1, l1);
  // Extract the remaining lines after s2 chunk in s1
  s1rest = %StreamEntry.next(peg_find_end(if(s1prev) s1prev else s1, l3));
  // Patch s1 - remove the overlapping memoes, insert s2
  return peg_patch_stream(s1, s1prev, s2, s1rest, l2 - l3);
}

function ptestint(logfile)
{
  str = .net(): Console.ReadLine();
  fprintlnf(logfile, %S<<("Expecting int, got: [", str, "]"));
  return .net(str): Int32.Parse((string)str);
}

// Protocol:
//  nm = buffer name
//  n1 = Number of bytes
//  n2 = First line
//  n3 = First character
//  n4 = Last line
//  n5 = Last previous line
//  [exactly n1 bytes]
function %make-stream-inner (lf, ps, ipos)
{
  n1 = ptestint(lf);
  n2 = ptestint(lf);
  n3 = ptestint(lf);
  n4 = ptestint(lf);
  n5 = ptestint(lf);
  s2 = peg_mkstream1(n1, n2, n3);
  ipos := s2;
  eoba = .net(): Console.ReadLine(); // Skip the [:EOB:] marker
  .net(): Console.ReadLine(); // Skip more
  if(and(n2>0,ps)) {
    return peg_merge_streams(ps, s2, n2, n4, n5)
  } else s2
}

function %make-stream (lf, pshash, ipos)
{
  nm = .net(): Console.ReadLine();
  if (length(%string->list(nm)) <  3) ccerror("0")
  else {
    s = %make-stream-inner (lf, ohashget(pshash, nm), ipos);
    ohashput(pshash, nm, s);
    return s
  }
}

function mainloop_inner(logf)
{
  do loop(pshash = mkhash()) {
    fprintlnf(logf, "READING STREAM");
    pss = mkref([]); ipos = mkref([]);
    try {
      pss := %make-stream(logf,pshash,ipos);
    } catch (t_Exception e) {
      fprintlnf(logf,%S<<("ERROR: ",%->s(e)));
      pss := [];
    };
    ss = ^pss;
    if (ss) {
      src = mkref(ss);
      env = #(PegEnv.new nil
                        (fun (tag first last signal)
                          (alet msg `((,(peg:decode-pos (sposloc first))
                                       ,(peg:decode-pos (sposloc last))) ,signal)
                             (psignal msg)
                          ))
                        #t
                        nil
                        nil
                        );
      fprintlnf(logf, %S<<(env));
      %parsing_loop(env, src, ^ipos);
      loop( pshash )
    } else loop(pshash)
  }
}

function mainloop(logf)
{
  try {
    try {
      glogf := logf;
      mainloop_inner(logf)
    } catch (t_MBaseException e) {
      fprintlnf(logf,%S<<("MBase exception: ", mbaseerror(e)));
      fprintlnf(logf,%S<<(e));
    }
  } catch (t_Exception e) {
      fprintlnf(logf,%S<<(e));
      mainloop(logf)
  }
}

function main()
{
  //logfile = %S<<("pfront-",.net(): DateTime.Now.Ticks.ToString() ,".log");
  //%call-with-output-file(logfile, mainloop)
  mainloop([])
}
